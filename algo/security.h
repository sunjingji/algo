#pragma once

// 安全威胁
// ❑ 窃听：加密
// ❑ 假冒：消息认证码，或数字签名
// ❑ 篡改：消息认证码，或数字签名
// ❑ 事后否认：数字签名
//
// 安全算法
// ❑ 哈希算法
// 哈希算法可以用来实现消息认证码，基于密码的用户认证。
// 哈希函数的算法中具有代表性的是MD5、SHA-1和SHA-2等。其中SHA-2是现在应用较为广泛的一个，而MD5和SHA-1存在安全隐患，不推荐使用。
//
// ❑ 共享秘钥加密(对称加密)
// 实现共享密钥加密的算法有凯撒密码、AES、DES、动态口令等，其中AES的应用最为广泛。
//
// ❑ 公开秘钥加密(非对称加密)
// 公开秘钥加密算法可以解决秘钥分发问题，同时也大大减少了秘钥的数量。用私有密钥对收到的密文进行解密，取得原本的数据。这种情况就不需要为每个发送对象都准备相对应的密钥了。需要保密的私有密钥仅由接收方保管，所以安全性也更高。
// 公开密钥的可靠性会出现问题，是因为A无法判断收到的公开密钥是否来自B。要想解决这个问题，就要用到之后会讲到的“数字证书”。
// 实现公开密钥加密的算法有RAS算法、椭圆曲线加密算法等，其中使用最为广泛的是RSA算法。
//
// ❑ 混合加密
// 在混合加密中，要用处理速度较快的共享密钥加密对数据进行加密。不过，加密时使用的密钥，则需要用没有密钥分配问题的公开密钥加密进行处理。
// 混合加密在安全性和处理速度上都有优势。能够为网络提供通信安全的SSL协议也应用了混合加密方法，该协议经过版本升级后，现在已正式命名为TLS。
//
// ❑ 迪菲-赫尔曼密钥交换
// 使用迪菲-赫尔曼密钥交换，通信双方仅通过交换一些公开信息就可以实现密钥交换。但实际上，双方并没有交换密钥，而是生成了密钥。因此，该方法又被叫作“迪菲-赫尔曼密钥协议”。
//
// ❑ 消息认证码
// 消息认证码可以实现“认证”和“检测篡改”这两个功能。
// 消息认证码机制通常会用到两个秘钥，共享加密秘钥x, 共享消息认证密钥y。发送方使用x对明文进行加密，然后使用y对密文计算生成MAC，把把密文和MAC发送给接收方。接收方使用y，对密文进行计算生成MAC，并验证消息是否被篡改。
// 我们可以把MAC想象成是由密钥和密文组成的字符串的“哈希值”。计算MAC的算法有HMAC、OMAC、CMAC[插图]等。目前，HMAC的应用最为广泛。
//
// ❑ 数字签名
// 数字签名的生成使用的是公开密钥加密，发送方使用自己的私有秘钥生成消息认证码，接收方可以验证这个认证码，但无法生成。因此数字签名不仅实现了消息认证码的认证和检测篡改功能，还可以预防事后否认问题的发生。
// 公开密钥加密的加密和解密都比较耗时。为了节约运算时间，实际上不会对消息直接进行加密，而是先求得消息的哈希值，再对哈希值进行加密，然后将其作为签名来使用
//
// ❑ 数字证书
// “公开密钥加密”和“数字签名”无法保证公开密钥确实来自信息的发送者，数字证书解决了这个问题。
// 数字证书通过认证中心来担保公开密钥的制作者。
//